// Code generated by go-bindata.
// sources:
// static/index.html
// static/style/index.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\xdb\xba\x15\x7f\xcf\xa7\x60\xd5\x6e\x49\xd0\x52\x92\x13\x3b\x4d\x52\xdb\xd8\x6d\xfe\xb4\x49\x97\x9b\xb4\x4d\xd2\xa5\xc3\x1e\x28\x91\x92\x68\x53\xa4\x4a\x52\x96\x55\xc3\xc0\xf6\xb6\xb7\x61\xc0\x80\x62\xd8\x7d\xd8\xcb\x1d\x2e\xb0\xf7\x3d\x6d\xfb\x34\x6b\xb7\xfb\x2d\x06\x52\x76\x62\x3b\x76\x9c\x7b\x71\xe5\x07\x53\xe4\xe1\xf9\xfb\x3b\x87\x87\x6a\x3e\xd8\x3f\xdd\x3b\xbf\x3a\x3b\x00\x89\x4e\x59\x7b\xa5\x69\xfe\x00\x43\x3c\x6e\x39\x84\x3b\xed\x95\x95\x66\x42\x10\x6e\xaf\x00\x00\x40\x33\x25\x1a\x81\x30\x41\x52\x11\xdd\x72\x2e\xce\x0f\xe1\xb6\x33\xb9\xc4\x51\x4a\x5a\x4e\x8f\x92\x22\x13\x52\x3b\x20\x14\x5c\x13\xae\x5b\x4e\x41\xb1\x4e\x5a\x98\xf4\x68\x48\xa0\x7d\x79\x02\x28\xa7\x9a\x22\x06\x55\x88\x18\x69\xd5\x5c\x7f\xcc\x8a\x51\xde\x05\x92\xb0\x96\xa3\x74\xc9\x88\x4a\x08\xd1\x0e\x48\x24\x89\x5a\x4e\xa2\x75\xa6\x76\x3d\x4f\x69\x14\x76\x33\xa4\x13\x37\x10\x42\x2b\x2d\x51\x16\x62\xee\x86\x22\xf5\xae\x27\xbc\xba\x5b\x77\x6b\x5e\xa8\xd4\xcd\x9c\x9b\x52\xee\x86\x4a\x39\x56\x94\x79\x28\xd7\x24\x96\x54\x97\x2d\x47\x25\x68\x73\xbb\x0e\x2f\xbb\x42\x6c\xf7\xeb\x7b\x2f\xd4\xe9\xe6\xe3\x97\x49\xbf\xb7\x7d\xee\xbd\x6e\x9c\xa1\x5f\xe9\xee\x2b\x9d\x6f\xe5\x71\xe3\xfc\x94\x7c\x7d\xb9\x15\x3f\xa7\x87\xe4\xdd\xd9\x8b\xc3\xaf\x77\x4e\xf2\xe4\x34\xda\xd8\x7c\xbd\x73\x14\x75\x12\x07\x84\x52\x28\x25\x24\x8d\x29\x6f\x39\x88\x0b\x5e\xa6\x22\x57\xf7\xb1\xcf\x18\xa6\x69\xe8\xd9\x15\x8f\x72\x4c\xfa\x56\xdd\xd1\x56\x4d\x35\x23\xed\x33\xda\xa7\x3d\xb0\x27\x18\x23\xa1\xa6\x82\xab\xa6\x57\x2d\xac\x34\xbd\x2a\x5a\x2b\xcd\x40\xe0\x72\xb4\xe9\x01\x84\x05\x09\x80\x59\x01\x05\xd5\x09\x08\x50\xd8\x8d\xa5\xc8\x39\x86\x70\x44\x63\x16\x89\x04\x56\x6c\xcb\xc9\x84\xa2\x86\xf1\xae\x24\x0c\x69\xda\x23\x23\xf9\x96\x14\xd3\x1e\x08\x19\x52\xaa\xe5\x74\xf2\x34\x10\x5a\x0a\x0e\xae\x47\x30\x62\x39\xc5\x20\x88\x61\x20\x69\x9c\x68\x4e\x94\x02\x15\x77\x18\xc4\x20\x0d\xa0\x3f\xc9\xcc\xc3\xb4\x37\x9f\xf7\x08\x3b\x30\x92\x82\xeb\x89\x2d\x95\xba\xb5\x31\x19\xa6\x2a\x63\xa8\x84\x75\xa0\x49\x5f\xc3\x22\xa1\x9a\x54\xc3\x90\x70\x4d\xa4\x33\xcf\x5b\x49\x6d\x86\x5f\x36\x66\xc7\x8c\x93\x16\x72\xfa\xef\xdf\xff\xfc\xf9\xdb\x7f\x7d\xfe\xcb\xbf\xbf\xfc\xe9\x1f\xff\xfb\xf4\x87\xa6\x97\xcd\x35\xa5\x8a\x02\x91\x37\xfe\x57\x9a\x86\xdd\x12\x70\xd4\xbb\xf6\xf8\x84\xa9\xd5\x2a\xd4\x22\x03\x19\xf4\x01\x86\x11\x23\x7d\x80\x18\x8d\x39\xa4\x9a\xa4\x6a\xa4\x81\xf1\x5e\xe3\x06\xb9\xa3\x60\xd9\x74\xda\xad\xf9\xfe\xcf\x9e\x4d\x04\x36\x14\x4c\xc8\x5d\xf0\xd0\x6f\xf8\x5b\xfe\xd6\xb3\x94\x72\x98\x10\x13\x90\xdd\xa7\x7e\xd6\x7f\xb6\x20\xa0\xc6\xe9\x88\x72\x63\xec\x94\x83\x06\x83\x47\x0a\xec\xb6\x80\xfb\x96\x6a\x32\x1c\x4e\x3b\x8f\xa3\xeb\xfd\x66\x68\x8c\xcc\x28\x63\x0a\x00\x63\x07\x54\x29\x94\xa2\x00\x9d\x5c\x69\x1a\x95\x70\x1c\xd7\x91\x53\xc7\x56\xa4\xa8\x5f\x15\x86\xdd\xa7\xbe\x51\x30\x45\x32\xa6\x7c\x17\xf8\x00\xe5\x5a\x3c\x9b\xd1\xc7\xca\x45\x63\xa9\x63\x31\x11\x65\xac\x8a\x98\x4a\xc7\x2e\x33\xda\xd8\x84\x1b\x0c\x68\x04\x1e\x29\x77\x1f\x51\x56\x0e\x87\x28\x34\xb8\x1e\x0c\x08\xc7\xc3\xe1\x38\xfb\xb0\x59\x73\xda\x5f\x3e\x7d\xfb\xe5\x6f\xdf\x34\x3d\xf4\x93\x09\x7d\x47\x48\x77\xa1\x54\xaf\xb0\xab\x4e\xfb\xf3\x1f\xbf\xfb\x89\xe5\x9e\x08\xae\x93\xc5\x82\xd3\x6a\xd9\x69\x7f\xf9\xe6\xf7\xf3\x24\x37\x3d\x8e\x7a\x0b\x20\x7e\x33\x4c\x11\xe5\x13\x44\x0f\x20\xa4\x29\x8a\x09\xd0\x49\x9e\x06\x1c\x51\x36\xc6\xfc\x7d\xd1\x36\x45\x83\xa4\x05\x73\x9e\x72\x35\x07\x04\x83\x81\x44\x3c\x26\xe0\x51\x46\x43\x9d\x4b\x62\x41\x7a\x56\x8d\xd5\x0c\x50\xa7\xfd\x68\x18\x83\x40\x48\x53\x98\x7c\x93\x59\x9b\x40\x25\x08\x8b\x62\x8e\x94\x59\xa5\x14\xa3\x98\xc8\x8c\x86\x0b\x68\x2d\x3d\x4d\xe3\x29\x23\x68\x1a\xdb\x14\xb7\xf9\x49\x30\x54\xa9\x03\x98\x40\x98\x9a\xb3\x96\xa1\x8f\xa5\x03\xb0\x44\x71\x8c\x02\x93\x0f\x11\x62\x8a\x38\x00\x23\x8d\xa0\x16\x71\x6c\x73\x44\x60\xc4\x9c\x85\x12\xcd\x53\xd1\x23\x19\x9b\x03\xfa\xe1\xd9\x60\x30\x76\x8c\x7b\x64\x03\xaf\x64\xd8\x9a\x98\x3c\x43\x3a\x19\x0e\x01\x62\xba\xe5\xdc\x65\xcb\x84\xed\x19\x0d\x21\xe5\x91\xb8\xce\xdc\x5b\x45\x47\xc6\x01\x5a\xf3\x9f\xd8\xdf\xfa\xbc\xcc\x5d\xc8\x5a\x28\x0d\xed\x49\xe6\xb4\x27\x94\x3c\x37\x33\xc3\xe1\xcc\x59\x31\xef\xa1\xb8\x35\x63\xf1\x62\x93\x16\x73\x5b\xb0\x34\x37\x2f\x47\x19\xb5\x72\xc7\xfe\xd9\xd7\x07\x10\x82\x13\x13\x49\x30\x9b\x17\xb3\x35\xf7\xfe\xd0\x9e\xf4\xa2\x45\x09\x88\x10\x26\x8e\xf5\x88\x73\x1b\x05\x1a\x05\xb6\xb5\x68\x39\xb0\x36\xaf\xb2\xce\x72\x83\x98\x22\x26\x62\x30\xf9\x32\xaa\x39\x04\x8f\x66\xfb\xec\x1e\x89\x53\x91\x8e\x8e\x80\x7b\x02\xae\xda\x53\x9d\xa8\xcb\xc0\x94\x34\xa6\x77\x55\x60\xb2\x5e\x20\x7d\x94\x66\x8c\x58\xcf\xff\x12\x05\x84\xcd\xc7\x58\xd2\x58\x22\x22\xc8\xb5\x16\x1c\xe8\x32\x33\xd8\xb7\x2f\xce\x75\x9e\x33\x71\x9d\xb4\x98\xaa\x94\x5e\x6b\xe2\x00\x24\x29\x82\xcc\x08\x6e\x39\x7b\x96\xee\x6e\x41\x56\x98\xca\x10\xaf\x76\x26\x14\x63\xc2\x5b\x8e\x96\x39\x71\xda\x3f\xd7\x34\x25\xea\x59\xd3\x33\x04\x4b\x14\xf6\x2a\x25\xef\x70\xf6\xdd\x89\x75\x3b\x16\xa6\xb7\x9c\xec\x8c\x00\x86\x01\x13\x61\xd7\x59\xdc\x3f\xda\x10\xe0\x92\xa3\x94\x86\xf7\x88\x3f\x98\x29\xa0\xa6\xd4\xfe\xd8\xda\xf5\x43\xad\x8b\x84\xd0\xcb\x91\x76\x17\x0c\x02\xcd\x41\xa0\x39\x54\x24\x14\x1c\x23\x59\xce\x87\x44\xdb\xc2\x60\x79\x7c\x40\x75\x6e\x4d\x5f\x80\x8a\xa2\x70\x33\xd3\xd9\xba\x9c\x68\x0f\x49\x5d\x08\xd9\x55\xde\x6c\xaa\x2f\x85\xd8\x8c\xca\x99\xa4\xa9\x51\xd8\xf6\xba\xff\xf9\xe7\x5f\xbf\xff\xed\xef\xbe\xff\xf4\xdd\xdc\xd2\x77\x0f\x07\x2f\xac\xa4\xb7\xa6\xe7\x4c\xcd\x96\xd6\xa9\xee\xe3\xa6\xe7\x68\x56\xf1\x5a\xd6\x61\x8c\xa1\x39\x6a\x82\xc1\x86\x3f\xd3\x06\xdb\xad\x49\xfd\xbe\xf7\x0a\x90\x6a\xd8\x70\xda\x07\x1c\x37\xbd\xa4\xbe\xa0\x47\x1a\xab\x66\x1e\x3b\xa3\x42\x49\x33\x6d\x91\x7c\x1d\xc9\x50\x60\xe2\x76\x3e\xe4\x44\x96\xf6\xfe\x5a\x0d\xe1\xa6\xb9\xbc\xba\x8a\xd1\xd4\xde\x59\x3b\x77\x5e\x59\x8f\xb7\x3e\xa0\xfa\x76\x7d\x27\x60\x07\x1b\x8f\x33\x71\x5e\x7f\xc7\xcb\x57\x49\xaf\xd1\x7b\x7f\xd8\x78\x2b\xcf\x84\x4f\x0f\x3a\xc5\xf3\xde\xab\x8b\xa7\x34\x7d\x71\xf8\xd5\xa5\x5f\x14\x9d\x5a\x79\x15\x89\x37\x6f\x8f\xc5\xfb\xc7\xfc\x86\xf7\xa2\xab\x6b\xd3\xab\x74\x6f\xdf\x61\x08\x36\x6a\x62\xc2\x68\x4f\x5a\x54\xf2\x2c\xf5\x32\x91\x65\x44\xba\x1d\xf5\x8b\x9a\x5b\xdb\x72\x7d\x0f\x53\xa5\xbd\x3c\xc5\xe3\x95\xe5\xc6\xbd\xde\x3a\xd8\x79\xf3\xb2\x17\x1c\x95\xef\x0f\x8f\x45\xa4\x1f\x6f\xa4\xc7\xc1\x4b\x74\xf0\x8e\x61\xd6\x3b\xda\x39\x3a\xbd\x2a\x1b\x7c\xf3\xe3\xe5\xce\xc7\x8f\xe7\x3a\x3d\xda\xbc\xe8\x2a\xfc\xfa\xcd\x65\x4f\xf4\x4f\x22\x21\xbe\x12\x4b\xee\xe3\x55\xa8\x96\x5a\xf7\x03\xbe\x38\x74\x66\x3f\x38\xdc\x6d\x5f\x11\xbd\xdd\x3f\xdc\x38\x68\xf8\x57\x1b\xfb\xb5\xfc\x02\x77\xfc\xd3\xcd\xfc\xe4\xf9\x31\xef\xe4\x17\xfb\xf5\xa3\xe4\xe9\x55\x81\xae\x70\x8d\x7e\x88\xba\xba\xe3\x5f\x08\xbc\xfd\x62\xef\xa0\xcf\x36\x4f\xe3\x6d\x1a\x15\xcf\xb7\x7e\x64\xf0\xda\x8f\xd6\xa2\x9c\xdb\x2b\x31\x58\x5b\x07\x03\xf0\x68\x6d\xf5\xd7\x53\xfd\xa6\x16\x82\x69\x9a\x39\xbf\x59\x5d\x77\x47\xe3\xb5\x75\x30\x5c\x5f\xc4\x6e\xf5\x61\x5a\xda\xf3\x75\x75\xdd\x15\x7c\x6d\x55\x25\xa2\xe0\x6e\xa0\x5c\x5b\xef\x56\x9f\x80\x5b\xf2\x1e\xa6\xe5\x11\xcf\x72\x6d\x04\x48\x1a\xc7\x44\xae\xad\x46\x22\xcc\xd5\xea\xb4\x9c\xa6\x57\x7d\xcf\x58\x69\x7a\xf6\x3b\xd5\xff\x03\x00\x00\xff\xff\x08\xb4\xda\x3c\xb7\x12\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4791, mode: os.FileMode(420), modTime: time.Unix(1586563289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticStyleIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdb\x6e\xe3\x36\x10\x7d\xcf\x57\x10\x28\x82\x4d\x80\xd0\x91\x36\xbb\xdd\x2c\xfd\xb2\x7d\xeb\x27\xf4\xad\x18\x91\x23\x7b\xd6\x14\x49\x90\x23\x5f\x5a\xe4\xdf\x0b\x49\x54\x74\xb1\x1b\x14\xf5\x83\x41\xce\x1c\x1e\x8e\xce\x5c\xf8\xe3\x80\x97\x3a\x42\x83\x49\xd4\x60\x90\x9c\xf8\xfb\x4e\x08\x21\x8a\xfb\xbc\xe8\x7e\x3e\x80\x26\xbe\x28\x51\x6c\x7b\xdb\x5b\xff\x5f\x16\xb7\x41\xe5\x08\x7a\xbb\xbb\x5b\xd1\xfb\x96\x3f\xe4\xcf\x47\xbb\x9f\xc5\x9a\x95\x28\xbf\x86\xf3\x64\xab\x3c\xb3\x6f\x94\x28\x8b\xd1\xfa\x71\x24\xc5\x9a\xae\xb8\xe6\x2a\x66\xd1\x56\xde\x5c\x32\x4f\x05\xfa\xb0\x8b\xbe\x75\x46\x6a\x6f\x7d\x54\xe2\x97\xf2\x7b\x09\x25\x0c\x70\x70\xd4\x00\x93\x77\xd2\x41\x83\x2a\x6b\xb7\xf6\x99\x36\xf6\x0b\x25\xca\xb4\xf6\x31\x35\xe4\x76\xb2\x6e\x9d\x1e\x20\x96\x1c\x42\x5c\xc3\x88\x71\xe0\x90\xda\xb7\x8e\x7b\x89\xde\xee\xee\x36\x8d\x37\x60\x73\xac\x01\x8c\x21\xb7\x53\xa2\xbc\x9f\x39\xe5\x79\xf4\x37\xe4\xe4\x89\x0c\xef\x95\x80\x96\xfd\x70\x45\x03\xe7\xd1\x58\x13\x4b\xed\x1d\xa3\xe3\xed\xfb\x81\x3d\xd2\x6e\xcf\xf3\x13\xa3\xe5\x1a\x0e\x71\x47\x4e\x89\x22\x83\xa7\x10\x66\x82\xfa\x23\xc6\xda\xfa\x93\xbc\xa8\x19\x2c\x90\xce\x7e\xf6\xe1\x3d\x19\x71\xb8\x28\xef\x56\x99\x5a\x64\x72\xf6\x15\x5d\x11\x4c\xc6\x31\xd8\xd7\xe2\xb8\x1f\xae\xaa\x76\xb2\xea\x89\x1d\xa6\x94\x2f\xad\xc9\x32\x46\x25\x26\xc7\x43\xb1\xf9\xf6\x38\x1c\xd8\x23\x18\x8c\xb2\xda\x5d\x95\x84\x12\x6d\xb4\x0f\x9f\x9e\x13\x03\x93\x7e\x0e\xa4\xb9\x8d\xf8\xfc\xed\xcb\xf7\xd7\xe2\xf5\xf3\xeb\x9f\xa1\xd8\xfc\x0c\xbb\x4f\x8f\x4b\xdd\x5e\xfa\x50\x56\xc5\x15\x31\x20\xb0\x12\xce\xe7\xe5\x15\x22\xf8\x44\x43\x85\x68\x74\x8c\xf1\x0a\x90\xe8\x2f\x54\x42\x77\x02\x0f\x81\xe7\xe4\xc8\x3a\x7a\x37\xf6\xdb\xc4\x02\x55\xf2\xb6\x65\xbc\xa1\xe6\x52\xf7\x3e\x23\x2f\x5f\xef\x27\x35\xa4\x83\x63\xe6\x93\x27\xac\x0e\xc4\xb2\xf2\x67\x59\x5b\x3c\xbf\xf7\xae\x6c\xd2\xd2\xb0\xd8\x8c\x5a\x4c\xc9\x32\x94\x82\x85\x8b\x12\x95\x3f\xaf\x2c\xdd\xc9\xdb\xd6\xed\x55\x0c\x01\xf4\x61\xa9\xd0\x18\xc8\x0d\xd7\xcf\x36\x31\xd5\x97\xb1\x8a\x97\xce\x49\xa9\x88\x16\x98\x8e\xd8\x0b\xf0\xa3\x41\x43\x20\xbc\xb3\x17\x91\x74\x44\x1c\x27\xe5\x46\x43\x34\x6a\xdf\xc9\x2f\x36\xc9\x92\xc1\x18\x48\x8f\x86\x40\x5a\x92\xab\xfd\x6c\x3c\x71\x04\x97\x6a\x1f\x1b\x35\x2c\x2d\x30\xfe\xf1\x20\xbb\xa1\xf6\xb8\xfd\x70\x88\xf5\xf0\x1c\xdc\x3b\x8b\xd8\x7c\x49\x4f\x23\xbc\xdb\xcc\x06\x5a\x1f\xdb\x2c\x2a\x41\xcd\x58\xcd\x73\xae\xa1\x0d\xa6\xb3\x37\xdb\xe2\xd7\xdc\x16\x37\x3f\xf7\xff\x13\x97\x33\xda\x39\xe1\x5a\xb9\x7f\x2b\xe0\xeb\x37\xa1\xf6\x8e\x73\x53\x7c\x5e\x1a\x4f\xb9\xfa\x2a\x6f\xcd\xcc\x5c\x43\x43\xf6\xa2\xc4\x6f\x91\xc0\x3e\x89\xdf\xd1\x1e\x91\x49\xc3\x93\x48\xe0\x92\x4c\x18\xa9\x1e\xe0\xf9\x29\x38\xed\x69\xbc\x7e\xfd\x74\xdd\x4e\xee\x2c\xb7\xff\x35\x87\xfd\x74\xf4\x89\x25\x13\x5b\xcc\x22\xf4\x17\xcb\x14\x40\x63\x37\x32\x4e\x11\xc2\xc0\x7a\xf2\xd1\xc8\x2a\x22\x1c\x94\x38\x20\x06\x09\xd6\x6e\x17\x73\x57\x89\x3d\x19\x83\xf9\x8d\x62\x3c\xb3\x9c\x5c\x68\x2d\x85\x44\xe9\x6a\xa8\xbe\x14\xbd\x82\x6f\xff\x04\x00\x00\xff\xff\x54\x9e\xc8\x29\x27\x08\x00\x00")

func staticStyleIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleIndexCss,
		"static/style/index.css",
	)
}

func staticStyleIndexCss() (*asset, error) {
	bytes, err := staticStyleIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style/index.css", size: 2087, mode: os.FileMode(420), modTime: time.Unix(1586562375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/style/index.css": staticStyleIndexCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"style": &bintree{nil, map[string]*bintree{
			"index.css": &bintree{staticStyleIndexCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

